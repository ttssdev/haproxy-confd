# Generated by confd

global
    daemon
    log /dev/log   local0
    log /dev/log   local1 notice
    pidfile /var/run/haproxy.pid
    nbproc  2 #no of processes
    maxconn 128000
    user haproxy
    group haproxy

defaults
    log    global
    option log-health-checks
    # make sure log-format is on a single line
    log-format {"type":"haproxy","timestamp":%Ts,"http_status":%ST,"http_request":"%r","remote_addr":"%ci","bytes_read":%B,"upstream_addr":"%si","backend_name":"%b","retries":%rc,"bytes_uploaded":%U,"upstream_response_time":"%Tr","upstream_connect_time":"%Tc","session_duration":"%Tt","termination_state":"%ts"}
    mode   http
    option httplog
    option dontlognull
    option forwardfor
    option http-keep-alive
    option http-tunnel
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend http-in
    bind *:80
    reqadd X-Forwarded-Proto:\ http

    {{range $service := lsdir "%%PREFIX%%/services"}}

      {{$schemedir := printf "%%PREFIX%%/services/%s/scheme" $service}}
      {{$scheme := getv $schemedir "http"}}
      {{$upstreamsdir := printf "%%PREFIX%%/services/%s/upstreams" $service}}

      {{$hostdir := printf "%%PREFIX%%/services/%s/host" $service}}
      {{$host := getv $hostdir "http"}}

      {{$pathdir := printf "%%PREFIX%%/services/%s/path" $service}}
      {{$path := getv $pathdir "/"}}

      {{if ls $upstreamsdir }}

      {{if ls $hostdir}}
      {{if ls $pathdir}}
    # ACL for {{$service}}
    acl missing_slash path_end {{$path}}
    http-request redirect code 301 prefix / drop-query append-slash if missing_slash
      {{end}}
      {{end}}

    acl host_{{$service}}_host hdr(host) -i {{$host}}
    acl host_{{$service}}_path path_beg -i {{$path}}
    #acl {{$service}}_health path_beg /ping

    #use_backend {{$service}} if host_{{$service}}_host
    {{if ls $hostdir}}
    {{if ls $pathdir}}
    use_backend {{$service}} if host_{{$service}}_host host_{{$service}}_path
    {{end}}
    {{else}}
    # use_backend {{$service}}
    {{end}}
    #use_backend {{$service}} if {{$service}}_health
      {{end}}
    {{end}}

    use_backend default

{{if exists "%%PREFIX%%/config/services/enable_ssl"}}
frontend https-in
    bind *:443 ssl crt /keys
    reqadd X-Forwarded-Proto:\ https

    {{range $service := lsdir "%%PREFIX%%/services"}}

      {{$schemedir := printf "%%PREFIX%%/services/%s/scheme" $service}}
      {{$scheme := getv $schemedir "http"}}
      {{$upstreamsdir := printf "%%PREFIX%%/services/%s/upstreams" $service}}

      {{if and (or (eq $scheme "https") (eq $scheme "http-and-https")) (ls $upstreamsdir) }}
    acl host_{{$service}} hdr_beg(host) -i {{$service}}
    #acl {{$service}}_health path_beg /ping

    use_backend {{$service}} if host_{{$service}}
    #use_backend {{$service}} if {{$service}}_health
      {{end}}
    {{end}}
{{end}}

{{range $service := lsdir "%%PREFIX%%/services"}}
{{$schemedir := printf "%%PREFIX%%/services/%s/scheme" $service}}
{{$scheme := getv $schemedir "http"}}
{{$upstreamsdir := printf "%%PREFIX%%/services/%s/upstreams" $service}}

{{$hostdir := printf "%%PREFIX%%/services/%s/host" $service}}
{{$host := getv $hostdir "http"}}

{{$pathdir := printf "%%PREFIX%%/services/%s/path" $service}}
{{$path := getv $pathdir "/"}}

{{if ls $upstreamsdir}}
backend {{$service}}
    balance leastconn
    {{if ls $hostdir}}
    {{if ls $pathdir}}
    reqirep ^(.*)(\{{$path}}\/?)(.*) \1\ /\3
    {{end}}
    {{end}}

    {{ if eq $scheme "https"}}
    redirect scheme https code 301 if !{ ssl_fc  }
    {{end}}
    {{range $upstream := ls $upstreamsdir}}
    {{$host := printf "%s/%s" $upstreamsdir $upstream }}
    {{/* it seems ls $upstreamsdir will get an extra "services" key, might be bug in confd */}}
    {{if exists $host}}
    server {{$upstream}} {{getv $host}} check
    {{end}}
    {{end}}
{{end}}
{{end}}


{{range $tcpservice := lsdir "%%PREFIX%%/tcp-services"}}
{{$tcpupstreamsdir := printf "%%PREFIX%%/tcp-services/%s/upstreams" $tcpservice}}
{{$tcpserviceport := printf "%%PREFIX%%/tcp-services/%s/ports" $tcpservice}}
{{if ls $tcpupstreamsdir}}
listen {{$tcpservice}}
    mode tcp
    bind *:{{getv $tcpserviceport}}

    {{range $tcpupstream := ls $tcpupstreamsdir}}
    {{$tcphost := printf "%s/%s" $tcpupstreamsdir $tcpupstream }}
    {{/* it seems ls $tcpupstreamsdir will get an extra "services" key, might be bug in confd */}}
    {{if exists $tcphost}}
    server {{$tcpupstream}} {{getv $tcphost}} check
    {{end}}
    {{end}}
{{end}}
{{end}}


listen MyStats
    mode http
    bind 0.0.0.0:1000
    stats enable
    stats uri /
    stats refresh 5s
    stats show-node
    stats show-legends

    # if authentication is wanted
    acl auth_ok http_auth(stats-auth)
    http-request auth unless auth_ok

userlist stats-auth
    user admin insecure-password {{getv "%%PREFIX%%/config/stats/password" "p4ss"}}
